schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

# Some comment. Btw, commas are fully ignored
,,,,,,,,,,,,,,,,,,,,,,,,,,,

"The q\"uery"
type Query {
    "field description"
    foo: Bar
    nonNullFoo: Bar!
    listFoo: [Bar]
    listNonNullFoo: [Bar!]
    nonNullListNonNullFoo: [Bar!]!
    fooWithArgs(in: InBar): Bar
}

type Mutation {
    doFoo: Bar @goober
}

type Subscription {
    subscribeFoo: Bar
}

"""Block comment"""
type Bar {
    """
    Other type of block comment
    """
    zar: Zaz
}

input InBar {
    zar: Zaz
}

scalar Zaz @specifiedBy(url: "https://example.com/foo")

interface Face {
    zar: Zaz
}

interface OtherFace {
    zar: Zaz
}

type FooFace implements Face & OtherFace {
    zar: Zaz
}

enum Choices {
    GOOD @goober,
    BAD,
    UGLY,
}

union SumTypes @goober =
  | Bar
  | Duck

directive @goober on FIELD_DEFINITION
  | OBJECT
  | ENUM_VALUE
  | UNION

# The directive def needs to keep reading until the next definition because
# there isn't actually anything telling it to stop.
type Duck {
    zar: Zaz
}
