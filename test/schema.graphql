schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

# Some comment. Btw, commas are fully ignored
,,,,,,,,,,,,,,,,,,,,,,,,,,,

"The q\"uery"
type Query @goober {
    "field description"
    foo: Bar
    nonNullFoo: Bar!
    listFoo: [Bar]
    listNonNullFoo: [Bar!]
    nonNullListNonNullFoo: [Bar!]!
    fooWithArgs("args can have docstrings" in: InBar, listIn: [InBar]): Bar
    fooWithDirectiveArg(foo: Bar @goober): Bar
}

type Mutation {
    doFoo: Bar @goober
}

type Subscription {
    subscribeFoo: Bar
}

"""Block comment"""
type Bar {
    """
    Other type of block comment
    """
    zar: Zaz @gooberWithArgs(listArg: ["one", "two", "three"], nonNullArg: "foo")

    "Parsing directives can finish with a docstring"
    zar2: Zaz

    # Underscores are valid in names
    _foo_bar: _foo_bar
}

scalar _foo_bar @gooberWithArgs(listArg: ["one", "two", "three"], nonNullArg: "foo")

input InBar {
    "first"
    zar: Zaz
    "second"
    zig: Zaz
    zag: Zaz
    defaulted: String = "this is a default value"
}

scalar Zaz @specifiedBy(url: "https://example.com/foo")

interface Face {
    zar: Zaz
}

interface OtherFace implements Face @gooberRepeatable @gooberRepeatable {
    zar: Zaz
}

type FooFace implements Face & OtherFace {
    zar: Zaz
}

enum Choices {
    GOOD @goober
    BAD
    UGLY
}

# Directive definitions and unions need to keep reading until the next definition
# or string because there isn't a right bracket telling it to stop.

union Foo = Bar

union SumTypes @goober =
  | Bar
  | Duck

"description after a union"
directive @goober on FIELD_DEFINITION
  | OBJECT
  | ENUM_VALUE
  | INTERFACE
  | UNION
  | ARGUMENT_DEFINITION

directive @gooberRepeatable repeatable on OBJECT

directive @gooberWithArgs(arg: String, listArg: [String], nonNullArg: String!) on SCALAR

"description after a directive"
type Duck {
    zar: Zaz
}
